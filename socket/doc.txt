Socket
网络套接字：一个文件描述符指向一个套接字（该套接字内部由内核借助两个缓冲区实现）；通信过程中，套接字一定是成对出现的

网络字节序
小端法：高位存高位，高位存低位 （pc存储）
大端法：高位存低位，低位存高位 （网络存储）
htonl 本地 --> 网络 IP
htons 本地 --> 网络 port
ntohl 网络 --> 本地 IP
ntohs 网络 --> 本地 port

int inet_pton(int af, const char *src, void *dst); IP --> 网络字节序
af： AF_INET、 AF_INET6
src：传入IP (点分十进制)
dst：传出IP (点分十进制)
返回值：
成功：1
异常：0，说明src指向不是一个有效的ip地址
失败：-1

const char *inet_ntop(int af, const void *src, char *dst, socklen_t size); 网络字节序 --> IP
af： AF_INET、 AF_INET6
src：网络字节序IP地址
dst：本地字节序IP地址
size：dst大小
返回值：
成功：dst
失败：NULL

socketaddr：
struct socketaddr_in addr;
addr.sin_family = AF_INET;
addr.sin_port = htons(9527);
# addr.sin_addr.s_addr = inet_pton(AF_INET, “192.168.1.108”, &dst)
addr.sin_addr.s_addr = htonl(INADDR_ANY); 取出系统中有效的任意IP地址，二进制类型

bind 绑定IP+port
listen 设置监听上限（同时）
accpet 阻塞监听客户端连接

connect 绑定IP+port

socket函数：
int socket(int domain, int type, int protocol);
domain： AF_INET、 AF_INET6、AF_UNIX
type：SOCK_STREAM、SOCK_DGRAM
protocol：0
返回值：成功返回新套接字对应文件描述符；失败-1

int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
sockfd：socket返回值
addr：传入参数（struct sockaddr*）&addr
struct socketaddr_in addr;
addr.sin_family = AF_INET;
addr.sin_port = htons(9527);
addr.sin_addr.s_addr = htonl(INADDR_ANY);
addrlen: sizeod(addr)地址结构大小
返回值：成功0，失败-1
bind(fd, (struct socketaddr *)&addr, size);

int listen(int sockfd, int backlog); 设置同时与服务器建立连接的上限数
sockfd：socket返回值
backlog：上限数值，最大128
返回值：成功0，失败-1

阻塞等待客户端建立连接，成功的话，返回一个与客户端成功的socket文件描述符
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
sockfd：socket返回值
addr：传出参数，成功与服务器建立连接的客户端地址结构（IP+port）
addrlen: 传入传出。入：addr的大小。出：客户端addr的实际大小
返回值：成功返回能与服务器通信的socket的文件描述符，失败-1

与服务器建立连接
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
sockfd：socket返回值
addr：传入参数，服务器的地质结构
addrlen: 地址结构大小
（不使用bind绑定客户端地质结构，采用“隐式绑定”）

4次挥手：半关闭（读写缓冲区）
半关闭状态：通信的一端可以发送结束报文段给对方，告诉本段已经完成数据的发送，但是允许继续接收来自对方的数据，直到对方也发送结束报文段关闭连接，例如途中接受报文段8过后。
滑动窗口：TCP流量控制（客户端会等待服务端窗口空余）

TIME_WAIT状态：客户端连接需要等待2MSL（报文段最大生存时间）的时间，才能完全关闭（接收迟到报文等）

客户端的状态：CLOSED–>SYN_SENT–>ESTABLISHED–>FIN_WAIT_1–>FIN_WAIT_2–>TIME_WAIT–>CLOSED

服务器的状态：CLOSED–>LISTEN–>SYN_RCVD–>ESTABLISHED–>CLOSE_WAIT–>LAST_ACK—>CLOSED

2MSL：保证最后一个ACK能被对端成功接收（等待期间，对端没收到我发的ACK，会继续发FIN）

端口复用(端口可重复使用)
int opt = 1; //端口复用
setsocketopt(lfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

半关闭：
close(cfd); 采用引用计数减一
或者
shutdown(int fd, int how); 采用全关闭
how : SHUT_RD: 关读端
how : SHUT_WD: 关写端
how : SHUT_RDWR：关读写端